package kr.or.ddit.member.controller;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import kr.or.ddit.member.service.MemberService;
import kr.or.ddit.member.vo.MemberVO;

// URL 매핑: /member/register.do로 접근 시 이 서블릿이 처리함
@WebServlet("/member/register.do")
public class RegisterController extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private MemberService memberService;

    // 서블릿 초기화 시 MemberService 인스턴스 생성
    public void init() {
        String baseURL = getServletContext().getInitParameter("baseURL");
        memberService = MemberService.getInstance(baseURL);
    }

    // GET 요청 처리: 회원가입 폼 표시
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // register.jsp로 포워딩하여 회원가입 폼 표시
        request.getRequestDispatcher("/WEB-INF/views/member/register.jsp").forward(request, response);
    }

    // POST 요청 처리: 회원가입 처리
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        request.setCharacterEncoding("utf-8");
        // 폼에서 전송된 데이터 추출
        String memId = request.getParameter("memId");
        String memPass = request.getParameter("memPass");
        String memPass2 = request.getParameter("memPass2");
        String memEmail = request.getParameter("memEmail");
        String memPhone = request.getParameter("memPhone");
        String birthStr = request.getParameter("memBirth");
        String memZipcode = request.getParameter("memZipcode");

        // 1. ID 중복 확인
        if (!memberService.isIdAvailable(memId)) {
            request.setAttribute("error", "이미 사용 중인 ID입니다.");
            request.getRequestDispatcher("/WEB-INF/views/member/register.jsp").forward(request, response);
            return;
        }
        
        // 2. 이메일 중복 확인
        if (!memberService.isEmailAvailable(memEmail)) {
            request.setAttribute("error", "이미 사용 중인 이메일입니다.");
            request.getRequestDispatcher("/WEB-INF/views/member/register.jsp").forward(request, response);
            return;
        }

        // 3. 비밀번호 확인
        if (!memPass.equals(memPass2)) {
            request.setAttribute("error", "비밀번호가 일치하지 않습니다.");
            request.getRequestDispatcher("/WEB-INF/views/member/register.jsp").forward(request, response);
            return;
        }
        
        // 4. 우편번호 입력 확인
        if (memZipcode == null || memZipcode.trim().isEmpty()) {
            request.setAttribute("error", "우편번호를 입력해주세요.");
            request.getRequestDispatcher("/WEB-INF/views/member/register.jsp").forward(request, response);
            return;
        }
        // 이메일 인증 여부 확인
        if (!memberService.isEmailVerified(memEmail)) {
            request.setAttribute("error", "이메일 인증이 완료되지 않았습니다.");
            request.getRequestDispatcher("/WEB-INF/views/member/register.jsp").forward(request, response);
            return;
        }


        // MemberVO 객체 생성 및 데이터 설정
        MemberVO member = new MemberVO();
        member.setMemId(memId);
        member.setMemName(request.getParameter("memName"));
        member.setMemPass(memPass);
        member.setMemEmail(memEmail);
        member.setMemPhone(memPhone);
        member.setMemZipcode(memZipcode);
        member.setMemAddress(request.getParameter("memAddress"));
        member.setMemDetailAddress(request.getParameter("memDetailAddress"));

     // 4. 생년월일 처리
        if (birthStr != null && !birthStr.isEmpty()) {
            try {
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                Date birthDate = sdf.parse(birthStr);
                member.setMemBirth(birthDate);
            } catch (ParseException e) {
                request.setAttribute("error", "올바르지 않은 생년월일 형식입니다.");
                request.getRequestDispatcher("/WEB-INF/views/member/register.jsp").forward(request, response);
                return;
            }
        }

        member.setMemDelyn("N");  // 회원 삭제 여부 초기값 설정

        try {
            // 이메일 인증이 완료되었으므로, 바로 회원 등록 진행
        	boolean result = memberService.registerMember(member);
        	if (result) {
            	request.getRequestDispatcher("/WEB-INF/views/member/registerSuccess.jsp").forward(request, response);
            } else {
                request.setAttribute("error", "회원 등록에 실패했습니다.");
                request.getRequestDispatcher("/WEB-INF/views/member/register.jsp").forward(request, response);
            }
        } catch (Exception e) {
            request.setAttribute("error", "회원 등록 중 오류가 발생했습니다.");
            request.getRequestDispatcher("/WEB-INF/views/member/register.jsp").forward(request, response);
        }
    }
}